<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--创建一个一个名字（可以用name或者id来表示，唯一标识，不可重复）为dao的bean，class表示它的类（必须是类，不可以是接口或者抽象类）-->
    <!--这个主要是用来等着被下面的bean使用的-->
    <!--<bean id="dao" class="x.dao.DaoImpl"/>-->

    <!--创建一个名字为service，类型是ServiceImpl的bean，并且将这个bean注入到ServiceImpl.java的成员变量dao当中-->
    <!--property 当中的name是成员变量的名字（需要保持一致），ref是指注入的是上面创建的bean-->
    <!--<bean id="service" class="x.service.MServiceImpll">-->
    <!--<property name="dao" ref="dao"/>-->
    <!--</bean>-->

    <!--使用注解来替代xml配置，上面的关于bean的配置就不需要来-->
    <context:annotation-config/>
    <context:component-scan base-package="x"/>
    <context:property-placeholder location="classpath:conf/application.properties"/>
    <!--mvc:annotation-driven 配置用来替换下面两个bean加载配置-->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />-->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />-->
    <mvc:annotation-driven>
        <!--解决返回字符串乱码问题-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--对静态资源文件的访问-->
    <mvc:resources mapping="/include/**" location="include/"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <property name="defaultViews">
            <list>
                <!-- Json视图 -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
            </list>
        </property>

    </bean>

    <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--//添加了这一句和多引用了一个命名空间，请和上面的文件对比着看-->
    <mybatis:scan base-package="x.dao"/>

    <!--//数据源配置，需要根据个人情况填写-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${druid.driverClassName}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
    </bean>

    <!--mybatis和Spring整合的SQLSessionFactory缓存-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
    </bean>

    <!--扫描MyBatis的持久层的接口类文件-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="x.mapper"/>
    </bean>

    <!-- 被代理对象 xml 配置方式->
    <!-<bean id="math" class="x.service.MathDiy"></bean>-->

    <!-- 通知 xml配置方式-->
    <!--<bean id="advices" class="x.aop.Advice"></bean>-->

    <!-- aop配置 xml配置方式-->
    <!--<aop:config proxy-target-class="true">-->
    <!--&lt;!&ndash;切面 &ndash;&gt;-->
    <!--<aop:aspect ref="advices">-->
    <!--&lt;!&ndash; 切点 &ndash;&gt;-->
    <!--<aop:pointcut expression="execution(* x.service.MathDiy.*(..))" id="pointcut1"/>-->
    <!--&lt;!&ndash;连接通知方法与切点 &ndash;&gt;-->
    <!--<aop:before method="before" pointcut-ref="pointcut1"/>-->
    <!--<aop:after method="after" pointcut-ref="pointcut1"/>-->
    <!--</aop:aspect>-->
    <!--</aop:config>-->



</beans>